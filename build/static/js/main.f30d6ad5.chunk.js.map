{"version":3,"sources":["components/styles/spaceAppStyles.js","components/SpaceApp.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","theme","root","backgroundColor","display","flexDirection","alignItems","breakpoints","up","header","fontWeight","fontSize","justifyContent","paddingLeft","footer","position","left","bottom","top","width","borderTop","zIndex","cursor","SpaceList","React","lazy","Filter","SpaceApp","props","useState","spaceData","setSpaceData","loading","setLoading","classes","className","style","alignContent","fallback","onUpdateFilterData","launchData","onUpdateLoadState","value","createMuiTheme","values","xs","sm","md","lg","xl","App","ThemeProvider","CssBaseline","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAEaA,EAASC,aAAW,SAACC,GAAD,MAAY,CAC3CC,KAAK,aACHC,gBAAiB,UACjBC,QAAS,OACTC,cAAe,SACfC,WAAY,UACXL,EAAMM,YAAYC,GAAG,MAAQ,CAC5BL,gBAAiB,UACjBC,QAAS,OACTC,cAAe,MACfC,WAAY,eAGhBG,OAAQ,CACNC,WAAY,OACZC,SAAU,WACVL,WAAY,SACZM,eAAgB,SAChBT,gBAAiB,UACjBU,YAAa,QAEfC,OAAQ,CACNC,SAAU,QACVC,KAAM,OACNC,OAAQ,EACRb,QAAS,OACTO,SAAU,SACVC,eAAgB,SAChBM,IAAK,OACLC,MAAO,OACPC,UAAW,oCACXjB,gBAAiB,UACjBkB,OAAQ,GACRC,OAAQ,eChCNC,EAAYC,IAAMC,MAAK,kBAAM,8DAC7BC,EAASF,IAAMC,MAAK,kBAAK,8DAWhB,SAASE,EAASC,GAAO,IAAD,EACJC,mBAAS,MADL,mBAC9BC,EAD8B,KACpBC,EADoB,OAEPF,oBAAS,GAFF,mBAE9BG,EAF8B,KAErBC,EAFqB,KAY/BC,EAAUnC,IAChB,OACE,oCACE,4BAAQoC,UAAWD,EAAQzB,OAAQ2B,MAAO,CAACC,aAAa,WAAxD,0BACA,yBAAKF,UAAWD,EAAQhC,MACnB,kBAAC,WAAD,CAAUoC,SAAU,4CACvB,kBAACZ,EAAD,CACEa,mBAfW,SAACC,GAClBT,EAAaS,IAePC,kBAXc,SAACC,GACrBT,EAAWS,MAYP,kBAACnB,EAAD,CAAWiB,WAAYV,EAAWE,QAASA,MAG7C,4BAAQG,UAAWD,EAAQpB,QAA3B,iC,2CC3BSb,EAZD0C,YAAe,CAC3BpC,YAAa,CACXqC,OAAQ,CACNC,GAAI,EACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,GAAI,SCuBKC,MAnBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAelD,MAAOA,GACpB,kBAACmD,EAAA,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5B,QCNzB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f30d6ad5.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\n\nexport const styles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: \"#cad0d6\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    [theme.breakpoints.up(\"sm\")]: {\n      backgroundColor: \"#cad0d6\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"flex-start\",\n    },\n  },\n  header: {\n    fontWeight: \"bold\",\n    fontSize: \"xx-large\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#cad0d6\",\n    paddingLeft: \"30px\",\n  },\n  footer: {\n    position: \"fixed\",\n    left: \"auto\",\n    bottom: 0,\n    display: \"flex\",\n    fontSize: \"medium\",\n    justifyContent: \"center\",\n    top: \"auto\",\n    width: \"100%\",\n    borderTop: \"1px solid hsla(0, 0%, 100%, 0.35)\",\n    backgroundColor: \"#edf5d9\",\n    zIndex: 10,\n    cursor: \"pointer\",\n  },\n}));\n","import React,{useState, Suspense} from 'react'\nimport {styles} from './styles/spaceAppStyles'\n\nconst SpaceList = React.lazy(() => import(\"./spaceList\"));\nconst Filter = React.lazy(()=> import(\"./filter\"))\n/*\n * Space Page component:\n * Its contains: Filters and SpaceList component\n *\n * For SpaceList: Render items for first time through match.parms from react-router-dom\n * as filter is updated data is passed from filter to spacelist through here\n * \n * For Filters method to set the data is passed from here after making successful\n * api request data is passed to spaceList for mapping action\n */\nexport default function SpaceApp(props){\n  const [spaceData,setSpaceData] = useState(null)\n  const [loading, setLoading] = useState(true);\n\n  const updateData = (launchData)=>{\n    setSpaceData(launchData)\n  }\n\n\n  const updateLoading = (value) => {\n    setLoading(value);\n  };\n  const classes = styles()\n  return (\n    <>\n      <header className={classes.header} style={{alignContent:\"center\"}}>SpaceX Launch Programs</header>\n      <div className={classes.root}>\n           <Suspense fallback={<div>Loading...</div>}>\n        <Filter\n          onUpdateFilterData={updateData}\n          onUpdateLoadState={updateLoading}\n          />\n        <SpaceList launchData={spaceData} loading={loading} />\n          </Suspense>\n      </div>\n      <footer className={classes.footer}>Developed by: Aakash Sangwan</footer>\n    </>\n  );\n}","import { createMuiTheme } from \"@material-ui/core/styles\";\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 700,\n      md: 960,\n      lg: 1024,\n      xl: 1920,\n    },\n  },\n});\n\nexport default theme","import React from 'react';\nimport SpaceApp from './components/SpaceApp'\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport theme from './theme'\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n          <Switch>\n            <Route exact path=\"/\" component={SpaceApp}>\n            </Route>\n            {/* <Route\n              exact\n              path=\"/launches/:luanch/:land/:year\"\n              component={SpaceApp}\n            ></Route> */}\n          </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}